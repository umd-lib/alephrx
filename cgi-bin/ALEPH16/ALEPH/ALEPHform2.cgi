#!/usr/bin/perl 

=head1 NAME

ALEPHform2.cgi - Staff summary view of reports

=head1 DESCRIPTION

Displays the staff summary page, and handles requests to update the reports and
create responses. These requests come from the Report Update Form generated by
the ALEPHureport.cgi script. This script also sends out reponse notification
emails when it successfully processes one of those requests.

=cut

############################################################################
## update 20080109 - JB, added "dlcooper@umd.edu" as bcc, see sub bcc_create
############################################################################
## update 20080121 - JB, added assigned filters
############################################################################
## update 20080125 - JB, added deferred status filter
##      2009/09/23 - Hans - remove dlcooper
##      2009/12/04 - Hans - remove HS, add DW
##                        - Add 'Not Closed' button
##      2010/09/07 - Hans - replace aleph@itd with usmaialeph@umd.edu
##      2012/02/13 - Hans - replace MK with MH
############################################################################

use FindBin qw{$Bin};
use lib "$Bin/../../../lib";

use DBI;
use CGI;
use CGI::Carp qw(fatalsToBrowser);
use URI;

use AlephRx::Util;

# get db connection info from the environment
# use SetEnv in the Apache config for the cgi-bin directory to set these
$database  = $ENV{ALEPHRX_DATABASE_NAME};
$db_server = $ENV{ALEPHRX_DATABASE_HOST};
$user      = $ENV{ALEPHRX_DATABASE_USER};
$password  = $ENV{ALEPHRX_DATABASE_PASS};

$statement = "";
$value = "";
$count = 0;
$mailprog = $ENV{ALEPHRX_MAILER};
$from = $AlephRx::Util::FROM;
$id = "";
$sort = "id";
# records per page
$numrec = "30";

$input_size = $ENV { 'CONTENT_LENGTH' };
read ( STDIN, $form_info, $input_size );
@input_pairs = split (/[&;]/, $form_info);

%input = ();

foreach $pair (@input_pairs) {
    #Convert plusses to spaces
    $pair =~ s/\+/ /g;

    #Split the name and value pair
    ($name, $value) = split (/=/, $pair);

    #Decode the URL encoded name and value
    $name =~ s/%([A-Fa-f0-9]{2})/pack("c",hex($1))/ge;
    $value =~ s/%([A-Fa-f0-9]{2})/pack("c",hex($1))/ge;

    #Copy the name and value into the hash
    $input{$name} = $value;
}

# assign request parameters to variables
$yes = $input{'yes'};
$no = $input{'no'};
$delete = $input{'delete'};
$filter_value = $input{'filter_value'};
$text = $input{'text'};
$id = $input{'record_id'}; 
$grp = $input{'grp'};
$campus = $input{'campus'};
$phone = $input{'phone'};
$name = $input{'name'};
$date = $input{'date'};
$status = $input{'status'};
$summary = $input{'summary'};
$rname = $input{'rname'};
$mresponse = $input{'response'};
$suppress = $input{'suppress'};
$mail = $input{'mail'};
$email = $input{'email'};
$cataloger = $input{'cataloger'};
$semail = $input{'semail'};

$email1 = $input{'email1'};
$email2 = $input{'email2'};
$email3 = $input{'email3'};
$email4 = $input{'email4'};
$email3a = $input{'email3a'};
$email4a = $input{'email4a'};
$email5 = $input{'email5'};

$limit = $input{'limit'};
$NEXT = $input{'NEXT'};
$PREV = $input{'PREV'};
$LAST = $input{'LAST'};
$FIRST = $input{'FIRST'};
$p = $input{'page_increment'};
$sort_value = $input{'sort_value'};
$ASSN = $input{'ASSN'};
$ASSNDW = $input{'ASSNDW'};
$ASSNHH = $input{'ASSNHH'};
$ASSNHB = $input{'ASSNHB'};
$ASSNDM = $input{'ASSNDM'};
$ASSNUS = $input{'ASSNUS'};
$ASSNJK = $input{'ASSNJK'};
$ASSNLS = $input{'ASSNLS'};
$PASSWORD = $input{'PASSWORD'};
$CHANGE = $input{'CHANGE'};
$URGENT = $input{'URGENT'};
$CIRC = $input{'CIRC'};
$SRQ = $input{'SRQ'};
$ACQ = $input{'ACQ'};
$ITM = $input{'ITM'};
$RES = $input{'RES'};
$ILL = $input{'ILL'};
$CAT = $input{'CAT'};
$PAC = $input{'PAC'};
$DEFR = $input{'DEFR'};
$REPORT = $input{'REPORT'};
$NOTCLOSED = $input{'NOTCLOSED'};
$PRE = $input{'PRESTP'};
$NEW = $input{'NEW'};
$PURPLE = $input{'PURPLE'};
$PEND = $input{'PENDING'};
$TECH = $input{'TECH'};
$RECORD = $input{'record'};
$hidden_filter = $input{'hidden_filter'};
$hidden_value = $input{'hidden_value'};
$option_value = $input{'option_value'};
$NAME = $input{'NAME'};
$DATE = $input{'DATE'};
$ID = $input{'ID'};
$CAMPUS = $input{'CAMPUS'};
$STATUS = $input{'STATUS'};
$SUMMARY = $input{'SUMMARY'};
$FUNC = $input{'FUNC'};
$id_i = $input{'id_i'};
$id_t = $input{'id_t'};
$val = $input{'val'};

$page_number = $input{'page_number'};

$submit = $input{'submit'};
$drecord = $input{'drecord'};

$value = $ENV{'QUERY_STRING'};

my $query = CGI->new;

# does not allow the insert of response when there is a name but no text sets
# the name to blank which prevents the insert.
if ($mresponse eq "") {
    $rname = "";
}

######################################
#maintains the sort value when paging
######################################

if ($NEXT) {
    $sort = $val;
}
if ($PREV) {
    $sort = $val;
}
if ($LAST) {
    $sort = $val;
}
if ($FIRST) {
    $sort = $val;
}

#####################################################
#validates the form of the additional email addresses
#####################################################

if ($email3) { &Check_Email($email3a);}
if ($email4) { &Check_Email($email4a);}

####################################################################
#  Replaces escaped single quotes with single quotes in filter only.
$filter_value =~ s/\\'/\'/g;
####################################################################

if ($no) {
    $message = "Delete aborted for record #$id<BR><BR>";
}

if ($yes) {
    $message = "Record #$id has been deleted<BR><BR>";
    &delete;
}

my $match_rows = 0;

# was this a form submission request?
if ($submit) {
    # check for duplicate rows
    $match_rows = match($id, $rname, $mresponse);
    if ($match_rows == 0) {
        # if there are none, set the "Updated record #" banner text
        &updated;
        $updated_value = $updated;
    } else {
        # if this is a duplicate, clear the $rname to prevent the response from
        # being inserted
        $rname = "";
        # set the updated banner to indicate this was a duplicate response
        $updated_value = qq{<span style="background-color: white"><P><FONT COLOR="#FF0000">Duplicate response detected. No response added to record $id</span></FONT></P>};
    }
}

# was this a form submission request?
if ($submit) {
    # update the record in the database, and insert a reply, if applicable
    &insert;
    &sort_value;
}

# was this a deletion request?
if ($delete) {
    # show the deletion confirmation form
    &pre_delete;
} else { 
    if ($filter eq "") {
        # set the filter to the filter_value request parameter
        $filter = $filter_value;
    }

    if ($email_check > 0) {
        # one of the submitted email addresses is bad, so display the Report
        # Update Error Page (bad emails)
        &bad_email_display;
    } else {
        # set the mail recipients
        &recipient;
        &email_options;

        # set $sort, $id_i, $option, and $option_value
        &sort_submit;
        &val;
        &update_val;
        &sort_increment;
        &sort_rules;

        # set $filter, $value, $row_count, and $num_pages
        &filter;
        &record;
        &get_row_count;
        &calc_num_pages;

        # sets $filter_display and $sort_display
        &filter_display;
        &sort_display;

        # renders the page
        &print_page_start_a;
        print "$updated_value\n";
        &next_paging;
        &prev_paging;
        &first_paging;
        &last_paging;
        &page_rules;
        &first_last;
        &get_sum_record;
        &print_fetch;
        &print_page_end_a;

        if ($email_count > 0) {
            $mail = "yes";
        }

        if ($match_rows >= 1){
            # alert the user that the record was not updated; sends no email in
            # this case
            # XXX: this occurs too late to be included in the response page
            $updated = "<span style=\"background-color : white\"><P><FONT COLOR=\"#FF0000\"> Record $id not updated!</span></FONT></P>"
        } else {
            if ($mail eq "yes") {
                # lookup the response date and send the notification mail
                &response_date;
                &mail;
            }
        }
    }
}

=head2 print_fetch()

Print the table of records. Reads data from C<$sth>, which has been executed by
L<get_sum_record()>.

=cut
sub print_fetch {
    print "<br>\n";
    print "<TABLE WIDTH =\"70%\" BORDER=0 CELLPADDING=2 CELLSPACING=2>\n";
    print "<TR><TD></TD>\n";
    print "<TD></TD>\n";
    print "<TD><FONT SIZE=-1><B><INPUT TYPE=\"submit\" VALUE=\"  ID  \" NAME=\"ID\"></TD>\n";
    print "<TD><FONT SIZE=-1><B><INPUT TYPE=\"submit\" VALUE=\"                         Summary                         \" NAME=\"SUMMARY\"></TD>\n";
    print "<TD><FONT SIZE=-1><B><INPUT TYPE=\"submit\" VALUE=\"Functional Area\" NAME=\"FUNC\"></TD>\n";
    print "<TD><FONT SIZE=-1><B><INPUT TYPE=\"submit\" VALUE=\"         Name         \" NAME=\"NAME\"></TD>\n";
    print "<TD><FONT SIZE=-1><B><INPUT TYPE=\"submit\" VALUE=\"Campus\" NAME=\"CAMPUS\"></TD>\n";
    print "<TD><FONT SIZE=-1><B><INPUT TYPE=\"submit\" VALUE=\"     Status     \" NAME=\"STATUS\"></TD>\n";
    print "<TD><FONT SIZE=-1><B><INPUT TYPE=\"submit\" VALUE=\"  Date  \" NAME=\"DATE\"></TD>\n";

    print "<TD><FONT SIZE=-3>Replies</TD></TR>\n";
    print "</FORM>\n";
    while (@row = $sth->fetchrow_array) {
        $row_id = $row[0];
        $reply_count = "";
        $response_count = " ";
        &time_calc;
        &reply_query;
        $rcount = 0;
        &cell_background;
        print "<TR><TD><FONT SIZE=+1 COLOR=\"#FF0000\">$response_count</FONT>\n</TD>";
        print "<FORM ACTION=\"ALEPHurecord.cgi\" METHOD=\"post\">\n";
        print "<TD><FONT SIZE=-1><INPUT TYPE=\"image\" SRC=\"../../../IMG\/up.gif\" VALUE=\"Update\"></TD>\n";
        print "<INPUT TYPE=\"hidden\" name=\"record\" VALUE=\"$row[0]\">\n";
        print "<INPUT TYPE=\"hidden\" name=\"page_increment\" VALUE=\"$p\">\n";
        print "<INPUT TYPE=\"hidden\" name=\"filter_value\" VALUE=\"$filter\">\n";
        print "<INPUT TYPE=\"hidden\" name=\"sort_value\" VALUE=\"$sort\">\n";
        print "<INPUT TYPE=\"hidden\" name=\"id_i\" VALUE=\"$id_i\">\n";
        print "<INPUT TYPE=\"hidden\" name=\"id_t\" VALUE=\"$id_i\">\n";
        print "<INPUT TYPE=\"hidden\" name=\"numrec\" VALUE=\"$numrec\">\n";
        print "</FORM>\n";
        print "<TD BGCOLOR=\"#FFFF99\"><FONT SIZE=-1>#&nbsp;<a href=\"../ALEPHsum_full.cgi?$row[0]\">$row[0]</TD>\n";
        print "<TD BGCOLOR=\"$cellbk\"><FONT SIZE=-1>&nbsp;$row[3]</TD>\n";
        print "<TD BGCOLOR=\"#FFFF99\"><FONT SIZE=-1>&nbsp;$row[1]</TD>\n";
        print "<TD BGCOLOR=\"#F0F8FF\"><FONT SIZE=-1>&nbsp;$row[6]</TD>\n";
        print "<TD BGCOLOR=\"#FFFF99\"><FONT SIZE=-1>&nbsp;$row[2]</TD>\n";
        print "<TD BGCOLOR=\"#F0F8FF\"><FONT SIZE=-1>&nbsp;$row[4]</TD>\n";
        print "<TD BGCOLOR=\"#FFFF99\"><FONT SIZE=-1>&nbsp;$row[5]</TD>\n";
        print "<TD BGCOLOR=\"#F0F8FF\" ALIGN=\"CENTER\"><FONT SIZE=-1>$reply_count</TD></TR>\n";

    }
}

=head2 get_row_count()

Queries the database to get the total number of records, used to calculate the
total number of pages. The total is stored in C<$row_count>.

=cut
sub get_row_count {

    $dbh = DBI->connect("DBI:mysql:$database:$db_server", $user, $password, { RaiseError => 1 });
    # this needs the raw interpolation, because $filter is an SQL fragment, not
    # a value to be substituted in
    $statement_10 =   "SELECT COUNT(*) from report, people where report.supress = 'no' and report.id = people.id $filter";
    $sth_10 = $dbh->prepare($statement_10);
    $sth_10->execute;

    while (@crow = $sth_10->fetchrow_array) {
        $row_count = $crow[0];
    }
    $sth_10->finish;
    $dbh->disconnect;
}

=head2 calc_num_pages()

Calculates the total number pages that will be used for all the database.
Divides the C<$row_count> by C<$numrec> (number of records per page. Rounds to
the next largest integer and stores that value in C<$num_pages>.

=cut
sub calc_num_pages {

    $num_pages_1 = $row_count / $numrec;
    $num_pages_2 = sprintf("%d\n", $num_pages_1);
    if ($num_pages_1 > $num_pages_2){
        $num_pages = $num_pages_2 + 1;
    }else{
        $num_pages = $num_pages_2;
    } 
}

=head2 next_paging()

If this request is the result of the "Next Page" button being clicked (and the
C<NEXT> POST parameter being submitted), increments the page variable C<$p>, and
prints the hidden field to pass on to the next page.

=cut
sub next_paging {
    if ($NEXT) {
        $p++;
        print "<INPUT TYPE=\"hidden\" name=\"page_increment\" VALUE=\"$p\">\n";
    }
}

=head2 last_paging()

If this request is the result of the "Last Page" button being clicked (and the
C<LAST> POST parameter being submitted),Sets the page variable C<$p> to one less
than C<$num_pages>, and prints the hidden field to pass on to the next page.

=cut
sub last_paging {
    if ($LAST) {
        $p = $num_pages - 1;
        print "<INPUT TYPE=\"hidden\" name=\"page_increment\" VALUE=\"$p\">\n";
    }
}

=head2 first_paging()

If this request is the result of the "First Page" button being clicked (and the
C<FIRST> POST parameter being submitted), sets the page variable C<$p> to 0, and
prints the hidden field to pass on to the next page.

=cut
sub first_paging {
    if ($FIRST) {
        $p = 0;
        print "<INPUT TYPE=\"hidden\" name=\"page_increment\" VALUE=\"$p\">\n";
    }
}

=head2 prev_paging()

If this request is the result of the "Previous Page" button being clicked (and
the C<PREV> POST parameter being submitted), decrements the page variable C<$p>,
prints the hidden field to pass on to the next page

=cut
sub prev_paging {
    if ($PREV) {
        $p--;
        print "<INPUT TYPE=\"hidden\" name=\"page_increment\" VALUE=\"$p\">\n";
    }
}

=head2 page_rules()

Decides which of the next and previous buttons will display based on the which
page we are on, and prints the appropriate buttons. Also updates the C<$limit>
variable used in the SQL query in L<get_sum_record()>.

=cut
sub page_rules {
    print "<table WIDTH=\"70%\" border=0><tr>\n";

    if ($p < 1){
        # first page ($p == 0)
        # do nothing
    } else {
        # after the first page
        # print controls to go back
        print "<TD ALIGN=\"LEFT\"><INPUT TYPE=\"submit\" VALUE=\"<< First Page\" NAME=\"FIRST\" STYLE=\"font-family:sans-serif; font-size:xx-small; background:beige ; color:#000; width:10em\">\n";
        print "<INPUT TYPE=\"submit\"  VALUE=\"< Previous Page\" NAME=\"PREV\" STYLE=\"font-family:sans-serif; font-size:xx-small; background:beige ; color:#000; width:10em\">\n";
    }

    if ($p > $num_pages - 2) {
        # past the next to last page
        # do nothing
    }else{
        if ($value =~ /\d/) {
            end;
        } elsif ($LAST) {
            # "Last Page" was clicked
            # do nothing
        } else {
            # before the last page
            # print controls to go forward
            print "<TD ALIGN=\"RIGHT\"><INPUT TYPE=\"submit\" VALUE=\"Next Page >\" NAME=\"NEXT\" STYLE=\"font-family:sans-serif; font-size:xx-small; background:beige ; color:#000; width:10em\">\n";
            print "<INPUT TYPE=\"submit\" VALUE=\"Last Page >>\" NAME=\"LAST\" STYLE=\"font-family:sans-serif; font-size:xx-small; background:beige ; color:#000; width:10em\">\n";
        }
    }
    # update the limit to be used in the SQL query in get_sum_record()
    $limit = $p * $numrec; 

    print "<BR>\n";
    print "</td></tr></table>\n";
}



=head2 first_last()

Set the C<$limit> variable used to construct the SQL query based on which page
we are on.

=cut
sub first_last {
    if ($LAST) {
        $limit = ($num_pages - 1) * $numrec;
    }
    if ($FIRST) {
        $limit = 0;
    }
}

=head2 filter()

Sets the C<$filter> variable used to construct the SQL where clause in
L<get_sum_record()>, based on which filter submit button was used to POST this
request.

=cut
sub filter {

    if ($CIRC) {
        $filter = "and people.grp = 'Circulation'";
    }

    if ($PAC) {
        $filter = "and people.grp = 'Web OPAC'";
    }

    if ($SRQ) {
        $filter = "and people.grp = 'Serials'";
    }

    if ($ACQ) {
        $filter = "and people.grp = 'Acquisitions'";
    }

    if ($CAT) {
        $filter = "and people.grp = 'Cataloging'";
    }

    if ($TECH) {
        $filter = "and people.grp = 'Technical'";
    }

    if ($ITM) {
        $filter = "and people.grp = 'Item Maintenance'";
    }

    if ($RES) {
        $filter = "and people.grp = 'Reserves'";
    }

    if ($ILL) {
        $filter = "and people.grp = 'ILL'";
    }

    if ($DEFR) {
        $filter = "and report.status = 'deferred'";
    }

    if ($PEND) {
        $filter = "and report.status = 'pending'";
    }

    if ($NEW) {
        $filter = "and report.status = 'new'";
    }

    if ($ASSN) {
        $filter = "and report.status like 'assigned%'";
    }

    if ($ASSNHH) {
        $filter = "and report.status = 'assigned (HH)'";
    }

    if ($ASSNDW) {
        $filter = "and report.status = 'assigned (DW)'";
    }

    if ($ASSNHB) {
        $filter = "and report.status = 'assigned (HB)'";
    }

    if ($ASSNDM) {
        $filter = "and report.status = 'assigned (Devs)'";
    }

    if ($ASSNUS) {
        $filter = "and report.status = 'assigned (US)'";
    }

    if ($ASSNJK) {
        $filter = "and report.status = 'assigned (JK)'";
    }

    if ($ASSNLS) { 
        $filter = "and report.status = 'assigned (LS)'";
    }

    if ($PASSWORD) {
        $filter = "and people.grp = 'Password reset'";
    }

    if ($CHANGE) {
        $filter = "and people.grp = 'Change request'";
    }

    if ($REPORT) {
        $filter = "and people.grp = 'Report request'";
    }

    if ($PURPLE) {
        $filter = "and report.status = 'user input needed'";
    }

    if ($NOTCLOSED) {
        $filter = "and report.status != 'closed'";
    }

}

=head2 record()

If C<$RECORD> is set (i.e., there was a request parameter C<record>) but is the
empty string, set it to the string "id". Then, if C<$RECORD> contains anything
that is not a digit, set C<$value> to "id". Otherwise, set C<$value> to
C<$RECORD>.

=cut
sub record {

    if ($RECORD){
        if ($RECORD eq "") {
            $RECORD = "id";
        }
    }

    if ($RECORD) {
        if ($RECORD =~ /\D/) {
            $value = "id";
        } else {
            $value = $RECORD;
        }
    }
}

=head2 get_sum_record()

Get summary records from the database. This is the main query used to display
data on this page.

Uses the variables C<$filter>, C<$sort>, C<$option>, C<$limit>, and C<$numrec>
to construct the query. Executes the query using the statement handle C<$sth>.

Only queries records where C<report.supress = 'no'>.

=cut
sub get_sum_record {

    $dbh = DBI->connect("DBI:mysql:$database:$db_server", $user, $password, { RaiseError => 1 });

    # this needs the raw interpolation, because these variables are SQL
    # fragments, not just values to be substituted in
    $statement =   "SELECT people.id, people.grp, people.campus, report.summary, report.status, DATE_FORMAT(report.date,'%m/%d/%y'), people.name, report.updated FROM people, report WHERE report.supress = 'no' and people.id = report.id $filter ORDER BY $sort $option LIMIT $limit, $numrec";

    $sth = $dbh->prepare($statement);
    $sth->execute;
}

=head2 insert()

Updates the records in database. Called when there is a request parameter of
C<submit>, as recorded in the C<$submit> variable. The intended flow is for this
to be a submission from the Report Update Form generated by the ALEPHurecord.cgi
script.

Updates the following fields, as long as the parameter is not empty:

    parameter  column
    =========  ======
    grp        people.grp
    status     report.status (also sets report.updated to NOW())
    text       report.text
    summary    report.summary
    campus     people.campus
    date       report.date
    name       people.name
    phone      people.phone
    suppress   report.supress
               (note the spelling differs between the parameter and the column)
    email      people.email
    cataloger  report.column

Also, if the C<rname> parameter is not empty, inserts a new reply into the reply
table, using the following mapping:

    parameter  column
    =========  ======
    rname      name
    response   text

If a new reply is created or the C<report.status> is updated, also updates the
C<report.updated> column to C<NOW()>.

=cut
sub insert {
    $dbh = DBI->connect("DBI:mysql:$database:$db_server", $user, $password, { RaiseError => 1 });

    if ($grp) {
        $statement =   "UPDATE people SET people.grp = ? WHERE id = ?";
        $sth = $dbh->prepare($statement);
        $sth->execute($grp, $id);
    }

    if ($status) {
        # setting status sets the reported updated timestamp
        $statement =   "UPDATE report SET report.status = ?, updated = NOW() WHERE id = ?";
        $sth = $dbh->prepare($statement);
        $sth->execute($status, $id);
    }

    if ($text) {
        $statement =   "UPDATE report SET report.text = ? WHERE id = ?";
        $sth = $dbh->prepare($statement);
        $sth->execute($text, $id);
    }

    if ($summary) {
        $statement =   "UPDATE report SET report.summary = ? WHERE id = ?";
        $sth = $dbh->prepare($statement);
        $sth->execute($summary, $id);
    }

    if ($campus) {
        $statement =   "UPDATE people SET people.campus = ? WHERE id = ?";
        $sth = $dbh->prepare($statement);
        $sth->execute($campus, $id);
    }

    if ($date) {
        $statement =   "UPDATE report SET report.date = ? WHERE id = ?";
        $sth = $dbh->prepare($statement);
        $sth->execute($date, $id);
    }

    if ($name) {
        $statement =   "UPDATE people SET people.name = ? WHERE id = ?";
        $sth = $dbh->prepare($statement);
        $sth->execute($name, $id);
    }

    if ($phone) {
        $statement =   "UPDATE people SET people.phone = ? WHERE id = ?";
        $sth = $dbh->prepare($statement);
        $sth->execute($phone, $id);
    }

    # the actual response is only inserted if there is a name given
    if ($rname) {
        $statement =   "INSERT into reply (parent_id, name, date, text, itd) VALUES (?, ?, NOW(), ?, 'yes')";
        $sth = $dbh->prepare($statement);
        $sth->execute($id, $rname, $mresponse);

        $statement =   "UPDATE report set updated = NOW() where id = ?";
        $sth = $dbh->prepare($statement);
        $sth->execute($id);
    }

    if ($suppress) {
        $statement =   "UPDATE report SET report.supress = ? where report.id = ?";
        $sth = $dbh->prepare($statement);
        $sth->execute($suppress, $id);
    }

    if ($email) {
        $statement =   "UPDATE people SET people.email = ? where people.id = ?";
        $sth = $dbh->prepare($statement);
        $sth->execute($email, $id);
    }

    if ($cataloger) {
        $statement =   "UPDATE report SET report.cataloger = ? where report.id = ?";
        $sth = $dbh->prepare($statement);
        $sth->execute($cataloger, $id);
    }
}

=head2 response_date()

Get the most recent response date for the report with ID C<$id>. Sets C<$rdate>
to that date.

=cut
sub response_date {

    $dbh = DBI->connect("DBI:mysql:$database:$db_server", $user, $password, { RaiseError => 1 });
    $statement =   "SELECT date from reply where parent_id = ? and itd = 'yes' ";

    $sth_6 = $dbh->prepare($statement);
    $sth_6->execute($id);

    while (@row = $sth_6->fetchrow_array) {
        $rdate = $row[0];
    }
    $sth_6->finish;
    $dbh->disconnect;
}

=head2 updated()

Set the C<$updated> variable with a "Record updated" message if the response
name field (C<$rname>) is not empty.

=cut
sub updated {
    if ($rname eq "") {
        $updated = ""; 
    } else {
        $updated = "<span style=\"background-color : white\"><P><FONT COLOR=\"#FF0000\"> Record $id has been updated!</span></FONT></P>"
    }
}

=head2 sort_value()

Sets C<$sort> or C<$sort_value>.

=cut
sub sort_value {
    if ($NEXT) {
        $sort = $sort_value;
    }
    if ($PREV) {
        $sort = $sort_value;
    }
    if ($LAST) {
        $sort = $sort_value;
    }
    if ($FIRST) {
        $sort = $sort_value;
    }
    if ($sort_value eq ""){
        $sort_value = "id";
    }
    if ($value eq ""){
        $sort = $sort_value;
    }
}


=head2 delete()

Deletes the selected records from the database - not used.

=cut
sub delete {
    $dbh = DBI->connect("DBI:mysql:$database:$db_server", $user, $password, { RaiseError => 1 });

    $statement =   "DELETE from people WHERE id = ?";
    $sth = $dbh->prepare($statement);
    $sth->execute($id);

    $statement =   "DELETE from report WHERE id = ?";
    $sth = $dbh->prepare($statement);
    $sth->execute($id);

    $statement =   "DELETE from response WHERE parent_id = ?";
    $sth = $dbh->prepare($statement);
    $sth->execute($id);
}

=head2 pre_delete()

Presents the selected record for deletion, offers the yes or no option.  If no is 
selected user is taken back to summary screen.

B<XXX: No UI is present for getting to this display.>

=cut
sub pre_delete  {
    $dbh = DBI->connect("DBI:mysql:$database:$db_server", $user, $password, { RaiseError => 1 });

    $statement =   "SELECT people.id, people.grp, people.campus, people.phone, people.name, report.date, report.status, report.summary, report.text FROM people, report WHERE people.id = report.id AND people.id = ?";

    $sth = $dbh->prepare($statement);
    $sth->execute($drecord);

    print "Content-type: text/html\n\n";
    print "<HTML>\n<HEAD>\n<TITLE>RxWeb Record Maintenance</TITLE>\n</HEAD>\n<BODY BACKGROUND=\"\/IMG\/bk2.gif\">\n";
    print "<FORM ACTION=\"ALEPHform2.cgi\" METHOD=\"post\">\n";
    print "<INPUT TYPE=\"hidden\" NAME=\"record_id\" VALUE=\"$drecord\">\n";
    print "<center>\n";
    print "<P><h1>RxWeb Records Maintenance</P></h1>\n";
    print "<FONT COLOR=\"#FF0000\">You are about to delete the following record!</FONT>\n";
    print "<P><INPUT TYPE=\"submit\" VALUE=\"YES\" NAME=\"yes\">\n"; 
    print "&nbsp;&nbsp;<INPUT TYPE=\"submit\" VALUE=\"NO\" NAME=\"no\"</P>\n";
    print "<INPUT TYPE=\"hidden\" name=\"record\" VALUE=\"$row[0]\">\n";
    print "<INPUT TYPE=\"hidden\" name=\"page_increment\" VALUE=\"$p\">\n";
    print "<INPUT TYPE=\"hidden\" name=\"filter_value\" VALUE=\"$filter_value\">\n";
    print "<INPUT TYPE=\"hidden\" name=\"sort_value\" VALUE=\"$sort\">\n";
    print "<INPUT TYPE=\"hidden\" name=\"numrec\" VALUE=\"$numrec\">\n";
    print "<BR>\n";
    print "<BR>\n";
    print "<TABLE BORDER=0 BGCOLOR=\"#FFFFCC\">\n";
    print "<TR>\n
    <TH>ID</TH>\n
    <TH ALIGN=LEFT>funct.area</TH>\n
    <TH ALIGN=LEFT>campus</TH>\n
    <TH ALIGN=LEFT>phone</TH>\n
    <TH ALIGN=LEFT>name</TH>\n
    <TH ALIGN=LEFT>date</TH>\n
    <TH ALIGN=LEFT>status</TH>\n
    <TH ALIGN=LEFT>summary</TH>\n
    <TH ALIGN=LEFT>text</TH>\n";

    while (@row = $sth->fetchrow_array) {
        print "<TR>\n";
        print "<TD BGCOLOR=\"#BEE4BE\" VALIGN=TOP>$row[0]</TD>\n";
        print "<TD BGCOLOR=\"#BEE4BE\" VALIGN=TOP>$row[1]</TD>\n";
        print "<TD BGCOLOR=\"#BEE4BE\" VALIGN=TOP>$row[2]</TD>\n";
        print "<TD BGCOLOR=\"#BEE4BE\" VALIGN=TOP>$row[3]</TD>\n";
        print "<TD BGCOLOR=\"#BEE4BE\" VALIGN=TOP>$row[4]</TD>\n";
        print "<TD BGCOLOR=\"#BEE4BE\" VALIGN=TOP>$row[5]</TD>\n";
        print "<TD BGCOLOR=\"#BEE4BE\" VALIGN=TOP>$row[6]</TD>\n";
        print "<TD BGCOLOR=\"#BEE4BE\" VALIGN=TOP>$row[7]</TD>\n";
        print "<TD BGCOLOR=\"#BEE4BE\" VALIGN=TOP>$row[8]</TD>\n";
        print "<TD BGCOLOR=\"#BEE4BE\" VALIGN=TOP>$row[9]</TD>\n";
        print "</TR>\n";
    }

    $sth->finish;
    $dbh->disconnect;
    print "</TABLE>\n";
    print "</FORM>\n";
    print "<BR>\n";
    print "</BODY>\n</HTML>\n";
}

=head2 sort_submit()

Set C<$sort> based on which sort button was clicked for this submission.
C<$sort> is used in the C<ORDER BY> clause in the SQL query in
L<get_sum_record()>. Also increments C<$id_i>.

=cut
sub sort_submit {
    if ($ID) {
        $sort = "report.id";
        $id_i++;
    }

    if ($SUMMARY) {
        $sort = "report.summary";
        $id_i++;
    }

    if ($NAME) {
        $sort = "people.name";
        $id_i++;
    }

    if ($DATE) {
        $sort = "report.date";
        $id_i++;
    }

    if ($CAMPUS) {
        $sort = "people.campus";
        $id_i++;
    }

    if ($STATUS) {
        $sort = "report.status";
        $id_i++;
    }

    if ($FUNC) {
        $sort = "people.grp";
        $id_i++;
    }

    if ($PRE) {
        $sort = "report.updated";
        $id_i++;
    }
}

=head2 sort_rules()

Set C<$otion_value> based on the current search order used in the SQL (as stored
in the C<$option> variable). Maps "DESC" to "Descending" and "" to "Ascending".

=cut
sub sort_rules {

    if ($option eq "DESC") {
        $option_value = "Descending";
    }

    if ($option eq "") {
        $option_value = "Ascending";
    }
}

=head2 sort_increment()

Sets the value of C<$option> to "DESC" if C<$id_i> is 1 or "" otherwise.
C<$option> is used to build the SQL query.

=cut
sub sort_increment {
    if ($id_i > 1) {
        $id_i = 0;
    }

    if ($id_i eq "1") {
        $option = "";
    }

    if ($id_i eq "0") {
        $option = "DESC";
    }
}

=head2 val()

Sets the C<$id_i> variable to 0 each time a new sort key is selected.

=cut
sub val  {
    if ($val ne $sort){
        $id_i = 0;
    }
}

=head2 update_val()

Maintains the C<$id_i> variable when a record is update using urecord.cgi.

=cut
sub update_val {
    if ($submit) {
        $id_i = $id_t;
    }
}

=head2 filter_display()

Set the C<$filter_display> variable used on the UI based on the value of the
C<$filter>.

=cut
sub filter_display  {
    if ($filter eq "and people.grp = 'Circulation'") {
        $filter_display = "Circulation";
    }

    if ($filter eq "and people.grp = 'Acquisitions'") {
        $filter_display = "Acquisitions";
    }

    if ($filter eq "and people.grp = 'Technical'") {
        $filter_display = "Technical";
    }

    if ($filter eq "and people.grp = 'Web OPAC'") {
        $filter_display = "Web OPAC";
    }

    if ($filter eq "and people.grp = 'Reserves'") {
        $filter_display = "Reserves";
    }

    if ($filter eq "and people.grp = 'ILL'") {
        $filter_display = "ILL";
    }

    if ($filter eq "and people.grp = 'Serials'") {
        $filter_display = "Serials";
    }

    if ($filter eq "and people.grp = 'Item Maintenance'") {
        $filter_display = "Item Maintenance";
    }

    if ($filter eq "and people.grp = 'Cataloging'") {
        $filter_display = "Cataloging";
    }

    if ($filter eq "and people.grp = 'Item Maintenance'") {
        $filter_display = "Item Maintenance";
    }

    if ($filter eq "") {
        $filter_display = "All Summaries";
    }

    if ($filter eq "and report.status = 'new'") {
        $filter_display = "New";
    }

    if ($filter eq "and report.status = 'pending'") {
        $filter_display = "Pending";
    }

    if ($filter eq "and people.grp = 'Report request'") {
        $filter_display = "Report Request";
    }

    if ($filter eq "and report.status = 'postponed'") {
        $filter_display = "Postponded";
    }

    if ($filter eq "and report.status = 'deferred'") {
        $filter_display = "Deferred";
    }

    if ($filter eq "and people.grp  = 'Report request'") {
        $filter_display = "Report Request";
    }

    if ($filter eq "and people.grp = 'Change request'") {
        $filter_display = "Change Request";
    }
    if ($filter eq "and people.grp = 'Password reset'") {
        $filter_display = "Password Reset";
    }
    if ($filter eq "and report.status != 'closed'") {
        $filter_display = "Not Closed";
    }
}

=head2 sort_display()

Set the C<$sort_display> variable used in the UI based on the value of
C<$sort>.

=cut
sub sort_display  {

    if ($sort eq "report.id") {
        $sort_display = "ID";
    }
    if ($sort eq "report.summary") {
        $sort_display = "Summary";
    }

    if ($sort eq "report.date") {
        $sort_display = "Date";
    }

    if ($sort eq "people.name") {
        $sort_display = "Name";
    }

    if ($sort eq "people.campus") {
        $sort_display = "Campus";
    }
    if ($sort eq "people.grp") {
        $sort_display = "Functional Area";
    }

    if ($sort eq "report.status") {
        $sort_display = "Status";
    }
    if ($sort eq "id") {
        $sort_display = "ID";
    }

    if ($sort eq "report.updated") {
        $sort_display = "Recent";
    }
}

=head2 print_page_start_a()

Prints the HTTP header and HTML page start, filter buttons, and hidden form
fields.

=cut
sub print_page_start_a {

    print "Content-type: text/html\n\n";
    print "<HTML>\n<HEAD>\n<TITLE>AlephRx Reports (Staff View)</TITLE>\n</HEAD>\n<BODY BGCOLOR=\"#98AFC7\">\n";
    print "<FORM ACTION=\"ALEPHform2.cgi?id\" METHOD=\"post\">\n";
    print "<a NAME=\"top\"></a>\n";
    print "<center>\n";
    print "<FONT SIZE=\"-1\"><INPUT TYPE=\"button\" VALUE=\"Submit a Report\" onClick=\"parent.location ='../../ALEPHform.cgi'\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</FONT>\n";
    print "<FONT SIZE=\"+3\"><STRONG>AlephRx Reports (Staff View)</STRONG></FONT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n";
    print "<FONT SIZE=\"-1\"><INPUT TYPE=\"button\" VALUE=\"View Statistics\" onClick=\"parent.location ='../ALEPHstats.cgi'\"></FONT><br><br>\n";

    print "<FONT SIZE=\"-1\">Select one of the following to filter reports.</font>\n";

    print "<table border=\"0\" bgcolor=\"#98AFC7\">\n";
    print "<tr>\n";
    print "<td align=\"center\"><INPUT TYPE=\"SUBMIT\" VALUE=\"Acquisitions\" NAME=\"ACQ\" STYLE=\"font-family:sans-serif; font-size:xx-small; background:#ff0 none; color:#000; width:10em\"></td>\n";

    print "<td align=\"center\"><INPUT TYPE=\"SUBMIT\" VALUE=\"Circulation\" NAME=\"CIRC\" STYLE=\"font-family:sans-serif; font-size:xx-small; background:#ff0 none; color:#000; width:10em\"></td>\n";

    print "<td align=\"center\"><INPUT TYPE=\"SUBMIT\" VALUE=\"Cataloging\" NAME=\"CAT\" STYLE=\"font-family:sans-serif; font-size:xx-small; background:#ff0 none; color:#000; width:10em\"></td>\n";

    print "<td align=\"center\"><INPUT TYPE=\"SUBMIT\" VALUE=\"Item Maintenance\" NAME=\"ITM\" STYLE=\"font-family:sans-serif; font-size:xx-small; background:#ff0 none; color:#000; width:10em\"></td>\n";

    print "<td align=\"center\"><INPUT TYPE=\"SUBMIT\" VALUE=\"Reserves\" NAME=\"RES\" STYLE=\"font-family:sans-serif; font-size:xx-small; background:#ff0 none; color:#000; width:10em\"></td>\n";

    print "<td align=\"center\"><INPUT TYPE=\"SUBMIT\" VALUE=\"ILL\" NAME=\"ILL\" STYLE=\"font-family:sans-serif; font-size:xx-small; background:#ff0 none; color:#000; width:10em\"></td>\n";

    print "<td align=\"center\"><INPUT TYPE=\"SUBMIT\" VALUE=\"Serials\" NAME=\"SRQ\" STYLE=\"font-family:sans-serif; font-size:xx-small; background:#ff0 none; color:#000; width:10em\"></td>\n";



    print "<td align=\"center\"><INPUT TYPE=\"SUBMIT\" VALUE=\"Web OPAC\" NAME=\"PAC\" STYLE=\"font-family:sans-serif; font-size:xx-small; background:#ff0 none; color:#000; width:10em\"></td>\n";

    print "<td align=\"center\"><INPUT TYPE=\"SUBMIT\" VALUE=\"Technical\" NAME=\"TECH\" STYLE=\"font-family:sans-serif; font-size:xx-small; background:#ff0 none; color:#000; width:10em\"></td>\n";



    print "<tr>\n";
    print "<td align=\"center\"><INPUT TYPE=\"SUBMIT\" VALUE=\"All Assigned\" NAME=\"ASSN\" STYLE=\"font-family:sans-serif; font-size:xx-small; background:#ff0 none; color:#000; width:10em\"></td>\n";

    print "<td><INPUT TYPE=\"SUBMIT\" VALUE=\"Assigned (HB)\" NAME=\"ASSNHB\" STYLE=\"font-family:sans-serif; font-size:xx-small; background:#ff0 none; color:#000; width:10em\"></td>\n";

    print "<td align=\"center\"><INPUT TYPE=\"SUBMIT\" VALUE=\"Assigned (HH)\" NAME=\"ASSNHH\" STYLE=\"font-family:sans-serif; font-size:xx-small; background:#ff0 none; color:#000; width:10em\"></td>\n";

    print "<td align=\"center\"><INPUT TYPE=\"SUBMIT\" VALUE=\"Assigned (DW)\" NAME=\"ASSNDW\" STYLE=\"font-family:sans-serif; font-size:xx-small; background:#ff0 none; color:#000; width:10em\"></td>\n";

    print "<td align=\"center\"><INPUT TYPE=\"SUBMIT\" VALUE=\"Assigned (Devs)\" NAME=\"ASSNDM\" STYLE=\"font-family:sans-serif; font-size:xx-small; background:#ff0 none; color:#000; width:10em\"></td>\n";

    print "<td align=\"center\"><INPUT TYPE=\"SUBMIT\" VALUE=\"Assigned (JK)\" NAME=\"ASSNJK\" STYLE=\"font-family:sans-serif; font-size:xx-small; background:#ff0 none; color:#000; width:10em\"></td>\n";

    print "<td align=\"center\"><INPUT TYPE=\"SUBMIT\" VALUE=\"Assigned (LS)\" NAME=\"ASSNLS\" STYLE=\"font-family:sans-serif; font-size:xx-small; background:#ff0 none; color:#000; width:10em\"></td>\n"; 

    print "<td align=\"center\"><INPUT TYPE=\"SUBMIT\" VALUE=\"Assigned (US)\" NAME=\"ASSNUS\" STYLE=\"font-family:sans-serif; font-size:xx-small; background:#ff0 none; color:#000; width:10em\"></td>\n";

    print "<td align=\"center\"><INPUT TYPE=\"SUBMIT\" VALUE=\"Password Reset\" NAME=\"PASSWORD\" STYLE=\"font-family:sans-serif; font-size:xx-small; background:#ff0 none; color:#000; width:10em\"></td>\n";






    print "<tr>\n";

    print "<td align=\"center\"><INPUT TYPE=\"SUBMIT\" VALUE=\"New\" NAME=\"NEW\" STYLE=\"font-family:sans-serif; font-size:xx-small; background:#ff0 none; color:#000; width:10em\"></td>\n";

    print "<td align=\"center\"><INPUT TYPE=\"SUBMIT\" VALUE=\"Pending\" NAME=\"PENDING\" STYLE=\"font-family:sans-serif; font-size:xx-small; background:#ff0 none; color:#000; width:10em\"></td>\n";

    print "<td align=\"center\"><INPUT TYPE=\"SUBMIT\" VALUE=\"PURPLE\" NAME=\"PURPLE\" STYLE=\"font-family:sans-serif; font-size:xx-small; background:#ff0 none; color:#000; width:10em\"></td>\n";


    print "<td align=\"center\"><INPUT TYPE=\"SUBMIT\" VALUE=\"Change Request\" NAME=\"CHANGE\" STYLE=\"font-family:sans-serif; font-size:xx-small; background:#ff0 none; color:#000; width:10em\"></td>\n";

    print "<td align=\"center\"><INPUT TYPE=\"SUBMIT\" VALUE=\"RECENT\" NAME=\"PRESTP\" STYLE=\"font-family:sans-serif; font-size:xx-small; background:#ff0 none; color:#000; width:10em\"></td>\n";

    print "<td align=\"center\"><INPUT TYPE=\"SUBMIT\" VALUE=\"Deferred\" NAME=\"DEFR\" STYLE=\"font-family:sans-serif; font-size:xx-small; background:#ff0 none; color:#000; width:10em\"></td>\n";

    print "<td align=\"center\"><INPUT TYPE=\"SUBMIT\" VALUE=\"Report Request\" NAME=\"REPORT\" STYLE=\"font-family:sans-serif; font-size:xx-small; background:#ff0 none; color:#000; width:10em\"></td>\n";

    print "<td align=\"center\"><INPUT TYPE=\"SUBMIT\" VALUE=\"All Summaries\" NAME=\"ALL\" STYLE=\"font-family:sans-serif; font-size:xx-small; background:#ff0 none; color:#000; width:10em\"></td>\n";

    print "<td align=\"center\"><INPUT TYPE=\"SUBMIT\" VALUE=\"Not Closed\" NAME=\"NOTCLOSED\" STYLE=\"font-family:sans-serif; font-size:xx-small; background:#ff0 none; color:#000; width:10em\"></td>\n";

    print "<tr><td colspan=\"2\"><font size=\"-1\">&nbsp;&nbsp;FILTER = <b>$filter_display</b></font></td><td cellpadding=\"2\" colspan=\"2\"><font size=\"-1\">&nbsp;&nbsp;SORT = <b>$sort_display</b></font></td><td cellpadding=\"2\" colspan=\"2\"><font size=\"-1\">&nbsp;&nbsp;ORDER = <b>$option_value</b></font></td><td cellpadding=\"2\" colspan=\"2\"><font size=\"-1\">&nbsp;&nbsp;Records per page = <b>$numrec</b></font></td>\n";

    print "</table>\n";
    print "</FORM>\n";
    print "<FORM ACTION=\"ALEPHurecord.cgi\" METHOD=\"post\">\n";
    print "<FONT SIZE=+1 COLOR=\"#FF0000\">&nbsp;&nbsp;*</FONT><FONT
SIZE=-1>&nbsp;&nbsp;Indicates a DSS response has been made.&nbsp;</FONT>\n";
    print "<B>Go to report # :</B>\n";
    print "<INPUT TYPE=\"text\" NAME=\"record\" SIZE=3>\n";
    print "<INPUT TYPE=\"submit\" VALUE=\"GO\">\n";
    print "&nbsp;&nbsp;&nbsp;&nbsp;<FONT SIZE=\"-1\"><INPUT TYPE=\"button\" VALUE=\"Search\" onClick=\"parent.location ='ALEPHsearch.cgi'\"></FONT><br><br>\n";
    print "</FORM>\n";

    print "<FORM ACTION=\"ALEPHform2.cgi?id\" METHOD=\"post\">\n";
    print "<INPUT TYPE=\"hidden\" name=\"hidden_filter\" VALUE=\"$filter\">\n";

    print "<INPUT TYPE=\"hidden\" name=\"option_value\" VALUE=\"$option_value\">\n";
    print "<INPUT TYPE=\"hidden\" name=\"id_i\" VALUE=\"$id_i\">\n";
    print "<INPUT TYPE=\"hidden\" name=\"page_number\" VALUE=\"$page_number\">\n";
    print "<INPUT TYPE=\"hidden\" name=\"filter_value\" VALUE=\"$filter\">\n";
    print "<INPUT TYPE=\"hidden\" name=\"val\" VALUE=\"$sort\">\n";
    print "<INPUT TYPE=\"hidden\" name=\"numrec\" VALUE=\"$numrec\">\n";
    print "<INPUT TYPE=\"hidden\" name=\"page_increment\" VALUE=\"$p\">\n";
}

=head2 print_page_end_a()

Prints the end of the table, disconnects the C<$dbh>, prints hidden fields, and
the end of the HTML page.

=cut
sub print_page_end_a {

    print "</TABLE>\n";
    $sth->finish;
    $dbh->disconnect;
    print "<BR>\n";
    print "<FORM ACTION=\"ALEPHform2.cgi?id\" METHOD=\"post\">\n";
    print "<INPUT TYPE=\"hidden\" name=\"record\" VALUE=\"$row[0]\">\n";
    print "<INPUT TYPE=\"hidden\" name=\"page_increment\" VALUE=\"$p\">\n";
    print "<INPUT TYPE=\"hidden\" name=\"filter_value\" VALUE=\"$filter\">\n";
    print "<INPUT TYPE=\"hidden\" name=\"sort_value\" VALUE=\"$sort\">\n";
    print "<INPUT TYPE=\"hidden\" name=\"val\" VALUE=\"$sort\">\n";
    print "<INPUT TYPE=\"hidden\" name=\"numrec\" VALUE=\"$numrec\">\n";
    print "<INPUT TYPE=\"hidden\" name=\"id_i\" VALUE=\"$id_i\">\n";
    &page_rules;
    print "</FORM>\n";
    print "<CENTER><a href=\"#top\"><FONT SIZE=-1>TOP</a>\n";
    print "<BR><BR>\n";
    print "</BODY>\n</HTML>\n";

} 

=head2 match()

    my $match_rows = match($id, $reply_name, $reply_text);
    if ($match_rows) {
        print "Found duplicate reponse for $id\n";
        print "(with name $reply_name and text $reply_text)\n";
    }

Check for duplicates amongst the current responses for a report. Takes report ID
number, reply name, and reply text arguments. Returns the number of rows in the
C<reply> table where the C<reply.parent_id>, C<reply.name>, and C<reply.text>
match those values exactly.

=cut
sub match {
    my ($id, $reply_name, $reply_text) = @_;

    $dbh = DBI->connect("DBI:mysql:$database:$db_server", $user, $password, { RaiseError => 1 });

    $statement = "SELECT COUNT(*) FROM reply WHERE reply.parent_id = ? AND reply.name = ? AND reply.text = ?";
    $sth = $dbh->prepare($statement);
    $sth->execute($id, $reply_name, $reply_text);

    my ($count) = $sth->fetchrow_array;
    return $count;
}

=head2 Check_Email()

Checks if its first argument is a valid email address. If it is not, it
increments the C<$email_check> counter, and pushes the bad string onto the
C<@store> array.

=cut
sub Check_Email {
    if ($_[0] =~ /(@.*@)|(,)|\s+|(\.\.)|(@\.)|(\.@)|(^\.)|(\.$)|(^\d+)|(\d+$)/ || ($_[0] !~ /^.+\@localhost$/ && $_[0] !~ /^.+\@\[?(\w|[-.])+\.[a-zA-Z]{2,3}|[0-9]{1,3}\]?$/)) {
        $email_check++;
        push @store, $_[0];
    } else {
    }
}

=head2 email_options()

Assemble a list of email address to send notification to, and store in
C<$final_email_list>. Also, for each email address, increment C<$email_count>.
If there are any email addresses, set C<$emailx> to "yes", but then if either
C<$rname> or C<$mresponse> is empty, set C<$emailx> to "no".

=cut
sub email_options {
    if ($email1) {
        $email_count++;
        $recipient =~ s/\s+//g;
        $rec1 = "$recipient";
        $emailx = 'yes';
    }

    if ($email2) {
        $email_count++;
        $email =~ s/\s+//g;
        $rec2 = ",$email";
        $emailx = 'yes';
    }

    if ($email3) {
        $email_count++;
        $email3a =~ s/\s+//g;
        $rec3 = ",$email3a";
        $emailx = 'yes';
    }

    if ($email4) {
        $email_count++;
        $email4a =~ s/\s+//g;
        $rec4 = ",$email4a";
        $emailx = 'yes';
    }

    if ($email5) {
        $email_count++;
        $rec5 = ",$email5";
        $emailx = 'yes';
    }

    if ($rname eq "") { 
        $emailx = "no"; 
    }

    if ($mresponse eq "") { 
        $emailx = "no"; 
    }

    $final_email_list = $rec1 . $rec2 . $rec3 . $rec4 . $rec5;
}

=head2 bad_email_display()

Displays error message when a bad email address is submitted. Prints all the
items in the C<@store> array.

=cut
sub bad_email_display {

    print "Content-type:  text/html\n\n";
    print "<html>\n<head>\n";
    print "<title>Error Updating AlephRx Report #$id</title>\n";
    print "</head>\n<body>\n";
    print "<center>\n";
    print "<h1>Error Updating AlephRx Report #$id</h1>\n";
    print "<h3>Not a valid email address.</h3>\n";
    print "<table>\n";
    print "<tr><td><cite><font size=+1>\n";

    foreach $store (@store) {
        print "$store<br>\n";
    }

    print "</cite></font></td></tr></table>\n";
    print "<SCRIPT=\"Javascript\">\n";
    print "<form>\n";
    print "<p><input TYPE=\"button\" VALUE=\" Back \" onClick=\"history.go(-1)\"></p>\n";
    print "</form>\n";
    print "</body>\n</html>\n";

}

=head2 mail()

If C<$emailx> is set to "yes", send a reponse notification email using the
mailer program. The path to this is read from C<$mailprog>, but ultimately comes
from the environment variable C<ALEPHRX_MAILER>.

Calls L<bcc_create()> to assemble a Bcc list in C<$bcc>.

=cut
sub mail {

    &bcc_create;

    # construct the URLs relative to the request, so the hostname and the path
    # to the script gets adjusted for whatever server this is running on
    my $reply_url = URI->new_abs('../ALEPHreply.cgi', $query->url);
    $reply_url->query($id);
    my $details_url = URI->new_abs('../ALEPHsum_full.cgi', $query->url);
    $details_url->query($id);

    if ($emailx eq "yes") {
        open (MAIL,"|$mailprog");
        print MAIL "To: $final_email_list\n";
        print MAIL "Bcc: $bcc\n" if $bcc;
        print MAIL <<END;
From: $from
Reply-To: $AlephRx::Util::REPLY_TO
Subject: RESPONSE:$slug#$id:$summary

--------------------------------------------------------------------------------
Please do not reply directly to this e-mail. 
To REPLY to this Rx: $reply_url
(If prompted, sign in with the standard USMAI username/password.)
--------------------------------------------------------------------------------

This is a DSS response to the AlephRx report listed below

 Original Report # : $id
     Date of Report: $date
   Functional Group: $grp
             Status: $status

END

        $dbh_1 = DBI->connect("DBI:mysql:$database:$db_server", $user, $password, { RaiseError => 1 });
        $statement_1 =   "SELECT name, DATE_FORMAT(date,'%m/%d/%y     %l:%i %p'), text, itd from reply where parent_id = ? ORDER BY date DESC";
        $sth_1 = $dbh_1->prepare($statement_1);
        $sth_1->execute($id);

        while (@row = $sth_1->fetchrow_array) {
            $itd = $row[3];
            &reply_type;
            print MAIL <<END;
  $reply_type submitted by: $row[0]
              Date/Time: $row[1]
               $reply_type: $row[2]

-----------------------------------------------
END
        }

        $sth_1->finish;
        $dbh_1->disconnect;

        &text;
        print MAIL <<END;

Original Report by: $original_name
   Original Report: $original_text

-----------------------------------------------

===================================================================================
View this Rx online: $details_url
END
        close (MAIL);
    } else {}
}

=head2 reply_type()

Sets the C<$reply_type> and C<$font_color> based on whether C<$itd> is "yes" or
not. If yes, the reply type is a "Response" and the color is red. Otherwise, the
reply type is "Reply" and the color is blue. The C<$reply_type> is also
formatted with extra padding to align correctly in the email.

=cut
sub reply_type {

    if ($itd eq "yes") {
        $reply_type = "Response";
        $font_color = "#FF0000";
    } else {
        $reply_type = "   Reply";
        $font_color = "#0000FF";
    }
}

=head2 text()

Gets the text and name of the original report from the database and sets
C<$original_text> and C<$original_name>.

=cut
sub text {

    $dbh = DBI->connect("DBI:mysql:$database:$db_server", $user, $password, { RaiseError => 1 });

    $statement = "select report.text, people.name from report, people WHERE report.id = ? and people.id = report.id";
    $sth = $dbh->prepare($statement);
    $sth->execute($id);

    while (@row = $sth->fetchrow_array) {
        $original_text = $row[0];
        $original_name = $row[1];
    }
}

=head2 recipient()

Sets the email C<$recipient> and C<$slug> based on the functional area
(C<$grp>).

=cut
sub recipient {
    $recipient = $AlephRx::Util::RECIPIENT_FOR{$grp};
    $slug      = $AlephRx::Util::SLUG_FOR{$grp};
}

=head2 cell_background()

Sets C<$cellbk> to the background color of the summary cell based on the status
of the report. This is the purple functionality.

=cut
sub cell_background  {
    # the most recent update to the report (report.updated is in $row[7]) is
    # equal to the timestamp of the latest user reply ($maxstamp) 
    if ($row[4] eq "user input needed" and $maxstamp eq $row[7]) {
        $cellbk = "#FF00FF"
    } elsif ($row[4] eq "pending" and $itd = "") {
        $cellbk = "#00FFFFF"
    } else {
        $cellbk = "#F0F8FF";
    }
}


=head2 reply_query()

Queries the reply to collect information for display. Sets the variables
C<$now>, C<$twoweeksago>, C<$oneweekago>, C<$onedayago>, C<$maxstamp>, and
C<$maxstampunix>. If the reply is a DSS response, sets C<$response_count>. If
not, it increments C<$reply_count>.

=cut
sub reply_query {
    $dbh = DBI->connect("DBI:mysql:$database:$db_server", $user, $password, { RaiseError => 1 });
    $statement_8 =   "SELECT date, itd, NOW(), DATE_SUB(NOW(),INTERVAL 14 DAY), DATE_SUB(NOW(), INTERVAL 7 DAY), DATE_SUB(NOW(), INTERVAL 1 DAY), date from reply where parent_id = ?";

    $sth_8 = $dbh->prepare($statement_8);
    $sth_8->execute($row_id);

    # $maxstamp keeps track of whether the most recent comment is a reply or a
    # response. Need to clear it before to make sure it doesn't bleed over from
    # report to report (isssue LIBILS-53)
    $maxstamp = "";
    while (@rrow = $sth_8->fetchrow_array) {
        $now = $rrow[2];
        $twoweeksago = $rrow[3];
        $oneweekago = $rrow[4];
        $onedayago = $rrow[5];

        if ($rrow[1] eq "no") {
            $itd = "no";
            $rcount++;
            $reply_count = $rcount;
            $maxstamp = $rrow[0];
            $maxstampunix = $rrow[6];
        } else {
            $response_count = "*";
            $maxstamp = "";
            $maxstampunix = 0;
        }
    }

    $sth_8->finish;
    $dbh->disconnect;
}


=head2 time_calc()

Sets C<$today> based on the current local time, in the format YYYYMMDD. Sets
C<$onemonthago> to C<$today - 30>.

=cut
sub time_calc {
    ($sec,$min,$hour,$day,$month,$year) = (localtime)[0,1,2,3,4,5]; # Get Date

    $today = sprintf("%04d%02d%02d", ($year + 1900),$month,$day);
    $onemonthago = $today -30;
}

=head2 bcc_create()

Ensure that usmaialeph@umd.edu will always receive the notification email. If
they are not in the C<$final_email_list> (as constructed by L<email_options()>),
then this function sets C<$bcc> to usmaialeph@umd.edu. Otherwise, C<$bcc> is set
to the empty string.

=cut
sub bcc_create {
    if ($final_email_list =~ /usmaialeph\@umd.edu/i) {
        $bcc = "";
    }else{
        $bcc = "usmaialeph\@umd.edu";
    }
}
